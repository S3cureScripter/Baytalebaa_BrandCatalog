<?php
/**
 * @category   Baytalebaa
 * @package    Baytalebaa_Shops
 * @author     m.ashraf@baytalebaa.com
 * @copyright  This file was generated by using Module Creator(http://code.vky.co.in/magento-2-module-creator/) provided by VKY <viky.031290@gmail.com>
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

namespace Baytalebaa\Shops\Block\Adminhtml\Catalogs\Edit\Tab;

use Magento\Backend\Block\Widget\Form\Generic;
use Magento\Backend\Block\Widget\Tab\TabInterface;
use Baytalebaa\Shops\Model\ResourceModel\Shops\CollectionFactory;

class Main extends Generic implements TabInterface
{
    protected $_wysiwygConfig;
    protected $_shopCollectionFactory;

    public function __construct(
        \Magento\Backend\Block\Template\Context $context,
        \Magento\Framework\Registry $registry,
        \Magento\Framework\Data\FormFactory $formFactory,
        \Magento\Cms\Model\Wysiwyg\Config $wysiwygConfig,
        CollectionFactory $shopCollectionFactory, // Inject the Shop CollectionFactory
        array $data = []
    )
    {
        $this->_wysiwygConfig = $wysiwygConfig;
        $this->_shopCollectionFactory = $shopCollectionFactory; // Assign CollectionFactory
        parent::__construct($context, $registry, $formFactory, $data);
    }

    /**
     * {@inheritdoc}
     */
    public function getTabLabel()
    {
        return __('Catalogs Information');
    }

    /**
     * {@inheritdoc}
     */
    public function getTabTitle()
    {
        return __('Catalogs Information');
    }

    /**
     * {@inheritdoc}
     */
    public function canShowTab()
    {
        return true;
    }

    /**
     * {@inheritdoc}
     */
    public function isHidden()
    {
        return false;
    }

    /**
     * Prepare form before rendering HTML
     *
     * @return $this
     */
    protected function _prepareForm()
    {
        $model = $this->_coreRegistry->registry('current_baytalebaa_shops_catalogs');
        /** @var \Magento\Framework\Data\Form $form */
        $form = $this->_formFactory->create();
        $form->setHtmlIdPrefix('catalogs_');
        $fieldset = $form->addFieldset('base_fieldset', ['legend' => __('Catalogs Information')]);

        if ($model->getId()) {
            $fieldset->addField('catalog_id', 'hidden', ['name' => 'catalog_id']);
        }

        $fieldset->addField(
            'title',
            'text',
            ['name' => 'title', 'label' => __('Title'), 'title' => __('Title'), 'required' => true]
        );
        $fieldset->addField(
            'url_slug',
            'text',
            ['name' => 'url_slug', 'label' => __('URL Slug'), 'title' => __('URL Slug'), 'required' => true]
        );
        // Modify the Catalog_shop_id to be a select field
        $fieldset->addField(
            'Catalog_shop_id',
            'select',
            [
                'name' => 'Catalog_shop_id',
                'label' => __('Catalog shop id'),
                'title' => __('Catalog shop id'),
                'required' => true,
                'values' => $this->_getShopOptions()  // Load shop options
            ]
        );

        $fieldset->addField(
            'image',
            'image',
            [
                'name' => 'image',
                'label' => __('Image'),
                'title' => __('Image'),
                'required'  => false
            ]
        );

        $fieldset->addField(
            'status',
            'select',
            ['name' => 'status', 'label' => __('Status'), 'title' => __('Status'),  'options'   => [0 => 'Disable', 1 => 'Enable'], 'required' => true]
        );

        $fieldset->addField(
            'content',
            'editor',
            [
                'name' => 'content',
                'label' => __('Content'),
                'title' => __('Content'),
                'style' => 'height:26em;',
                'required' => true,
                'config'    => $this->_wysiwygConfig->getConfig(),
                'wysiwyg' => true
            ]
        );

        $form->setValues($model->getData());
        $this->setForm($form);
        return parent::_prepareForm();
    }

    /**
     * Get shop options for the select field
     *
     * @return array
     */
    protected function _getShopOptions()
    {
        $options = [];
        $shopCollection = $this->_shopCollectionFactory->create();

        foreach ($shopCollection as $shop) {
            $options[] = [
                'value' => $shop->getId(),
                'label' => $shop->getTitle()
            ];
        }

        return $options;
    }
}
